-----------------------------------------------------------------------------
Info file generated by Happy Version 2.1.5 from ./app/Drakon/Parser.y
-----------------------------------------------------------------------------


rule 2 is unused
rule 3 is unused
rule 4 is unused

terminal rightBranchIdentifier is unused
terminal soloIdentifier is unused
terminal '}' is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_diagram -> fork                             (0)
	fork -> block leftBranchIdentifier '{'             (1)
	prods ->                                           (2)
	prods -> block                                     (3)
	prods -> prods block                               (4)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	block          { TokenBlock $$ }
	leftBranchIdentifier{ TokenLeftBranchIdentifier $$ }
	rightBranchIdentifier{ TokenRightBranchIdentifier $$ }
	soloIdentifier { TokenSoloIdentifier $$ }
	'{'            { TokenOCB }
	'}'            { TokenCCB }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_diagram  rule  0
	fork            rule  1
	prods           rules 2, 3, 4

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_diagram -> . fork                            (rule 0)

	block          shift, and enter state 2

	fork           goto state 3

State 1

	fork -> . block leftBranchIdentifier '{'            (rule 1)

	block          shift, and enter state 2


State 2

	fork -> block . leftBranchIdentifier '{'            (rule 1)

	leftBranchIdentifiershift, and enter state 4


State 3

	%start_diagram -> fork .                            (rule 0)

	%eof           accept


State 4

	fork -> block leftBranchIdentifier . '{'            (rule 1)

	'{'            shift, and enter state 5


State 5

	fork -> block leftBranchIdentifier '{' .            (rule 1)

	%eof           reduce using rule 1


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 5
Number of terminals: 6
Number of non-terminals: 3
Number of states: 6
