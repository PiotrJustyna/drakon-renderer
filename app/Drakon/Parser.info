-----------------------------------------------------------------------------
Info file generated by Happy Version 2.1.5 from ./app/Drakon/Parser.y
-----------------------------------------------------------------------------

state 0 contains 1 shift/reduce conflicts.
state 7 contains 1 shift/reduce conflicts.
state 9 contains 1 shift/reduce conflicts.
state 20 contains 1 shift/reduce conflicts.
state 22 contains 1 shift/reduce conflicts.
state 24 contains 1 shift/reduce conflicts.
state 26 contains 1 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_diagram -> prods                            (0)
	prods ->                                           (1)
	prods -> block                                     (2)
	prods -> block leftBranch '{' prods soloIdentifier '}' rightBranch '{' prods soloIdentifier '}'   (3)
	prods -> block leftBranch '{' prods soloIdentifier '}' rightBranch '{' prods '}'   (4)
	prods -> block leftBranch '{' prods '}' rightBranch '{' prods soloIdentifier '}'   (5)
	prods -> block leftBranch '{' prods '}' rightBranch '{' prods '}'   (6)
	prods -> prods block                               (7)
	prods -> prods block leftBranch '{' prods soloIdentifier '}' rightBranch '{' prods soloIdentifier '}'   (8)
	prods -> prods block leftBranch '{' prods soloIdentifier '}' rightBranch '{' prods '}'   (9)
	prods -> prods block leftBranch '{' prods '}' rightBranch '{' prods soloIdentifier '}'   (10)
	prods -> prods block leftBranch '{' prods '}' rightBranch '{' prods '}'   (11)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	block          { TokenBlock $$ }
	soloIdentifier { TokenSoloIdentifier $$ }
	leftBranch     { TokenLeftBranch }
	rightBranch    { TokenRightBranch }
	'{'            { TokenOCB }
	'}'            { TokenCCB }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_diagram  rule  0
	prods           rules 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_diagram -> . prods                           (rule 0)

	block          shift, and enter state 3
			(reduce using rule 1)

	%eof           reduce using rule 1

	prods          goto state 2

State 1

	prods -> .                                          (rule 1)



State 2

	%start_diagram -> prods .                           (rule 0)
	prods -> prods . block                              (rule 7)
	prods -> prods . block leftBranch '{' prods soloIdentifier '}' rightBranch '{' prods soloIdentifier '}'    (rule 8)
	prods -> prods . block leftBranch '{' prods soloIdentifier '}' rightBranch '{' prods '}'    (rule 9)
	prods -> prods . block leftBranch '{' prods '}' rightBranch '{' prods soloIdentifier '}'    (rule 10)
	prods -> prods . block leftBranch '{' prods '}' rightBranch '{' prods '}'    (rule 11)

	block          shift, and enter state 5
	%eof           accept


State 3

	prods -> block .                                    (rule 2)
	prods -> block . leftBranch '{' prods soloIdentifier '}' rightBranch '{' prods soloIdentifier '}'    (rule 3)
	prods -> block . leftBranch '{' prods soloIdentifier '}' rightBranch '{' prods '}'    (rule 4)
	prods -> block . leftBranch '{' prods '}' rightBranch '{' prods soloIdentifier '}'    (rule 5)
	prods -> block . leftBranch '{' prods '}' rightBranch '{' prods '}'    (rule 6)

	block          reduce using rule 2
	soloIdentifier reduce using rule 2
	leftBranch     shift, and enter state 4
	'}'            reduce using rule 2
	%eof           reduce using rule 2


State 4

	prods -> block leftBranch . '{' prods soloIdentifier '}' rightBranch '{' prods soloIdentifier '}'    (rule 3)
	prods -> block leftBranch . '{' prods soloIdentifier '}' rightBranch '{' prods '}'    (rule 4)
	prods -> block leftBranch . '{' prods '}' rightBranch '{' prods soloIdentifier '}'    (rule 5)
	prods -> block leftBranch . '{' prods '}' rightBranch '{' prods '}'    (rule 6)

	'{'            shift, and enter state 7


State 5

	prods -> prods block .                              (rule 7)
	prods -> prods block . leftBranch '{' prods soloIdentifier '}' rightBranch '{' prods soloIdentifier '}'    (rule 8)
	prods -> prods block . leftBranch '{' prods soloIdentifier '}' rightBranch '{' prods '}'    (rule 9)
	prods -> prods block . leftBranch '{' prods '}' rightBranch '{' prods soloIdentifier '}'    (rule 10)
	prods -> prods block . leftBranch '{' prods '}' rightBranch '{' prods '}'    (rule 11)

	block          reduce using rule 7
	soloIdentifier reduce using rule 7
	leftBranch     shift, and enter state 6
	'}'            reduce using rule 7
	%eof           reduce using rule 7


State 6

	prods -> prods block leftBranch . '{' prods soloIdentifier '}' rightBranch '{' prods soloIdentifier '}'    (rule 8)
	prods -> prods block leftBranch . '{' prods soloIdentifier '}' rightBranch '{' prods '}'    (rule 9)
	prods -> prods block leftBranch . '{' prods '}' rightBranch '{' prods soloIdentifier '}'    (rule 10)
	prods -> prods block leftBranch . '{' prods '}' rightBranch '{' prods '}'    (rule 11)

	'{'            shift, and enter state 9


State 7

	prods -> block leftBranch '{' . prods soloIdentifier '}' rightBranch '{' prods soloIdentifier '}'    (rule 3)
	prods -> block leftBranch '{' . prods soloIdentifier '}' rightBranch '{' prods '}'    (rule 4)
	prods -> block leftBranch '{' . prods '}' rightBranch '{' prods soloIdentifier '}'    (rule 5)
	prods -> block leftBranch '{' . prods '}' rightBranch '{' prods '}'    (rule 6)

	block          shift, and enter state 3
			(reduce using rule 1)

	soloIdentifier reduce using rule 1
	'}'            reduce using rule 1

	prods          goto state 8

State 8

	prods -> block leftBranch '{' prods . soloIdentifier '}' rightBranch '{' prods soloIdentifier '}'    (rule 3)
	prods -> block leftBranch '{' prods . soloIdentifier '}' rightBranch '{' prods '}'    (rule 4)
	prods -> block leftBranch '{' prods . '}' rightBranch '{' prods soloIdentifier '}'    (rule 5)
	prods -> block leftBranch '{' prods . '}' rightBranch '{' prods '}'    (rule 6)
	prods -> prods . block                              (rule 7)
	prods -> prods . block leftBranch '{' prods soloIdentifier '}' rightBranch '{' prods soloIdentifier '}'    (rule 8)
	prods -> prods . block leftBranch '{' prods soloIdentifier '}' rightBranch '{' prods '}'    (rule 9)
	prods -> prods . block leftBranch '{' prods '}' rightBranch '{' prods soloIdentifier '}'    (rule 10)
	prods -> prods . block leftBranch '{' prods '}' rightBranch '{' prods '}'    (rule 11)

	block          shift, and enter state 5
	soloIdentifier shift, and enter state 11
	'}'            shift, and enter state 12


State 9

	prods -> prods block leftBranch '{' . prods soloIdentifier '}' rightBranch '{' prods soloIdentifier '}'    (rule 8)
	prods -> prods block leftBranch '{' . prods soloIdentifier '}' rightBranch '{' prods '}'    (rule 9)
	prods -> prods block leftBranch '{' . prods '}' rightBranch '{' prods soloIdentifier '}'    (rule 10)
	prods -> prods block leftBranch '{' . prods '}' rightBranch '{' prods '}'    (rule 11)

	block          shift, and enter state 3
			(reduce using rule 1)

	soloIdentifier reduce using rule 1
	'}'            reduce using rule 1

	prods          goto state 10

State 10

	prods -> prods . block                              (rule 7)
	prods -> prods . block leftBranch '{' prods soloIdentifier '}' rightBranch '{' prods soloIdentifier '}'    (rule 8)
	prods -> prods block leftBranch '{' prods . soloIdentifier '}' rightBranch '{' prods soloIdentifier '}'    (rule 8)
	prods -> prods . block leftBranch '{' prods soloIdentifier '}' rightBranch '{' prods '}'    (rule 9)
	prods -> prods block leftBranch '{' prods . soloIdentifier '}' rightBranch '{' prods '}'    (rule 9)
	prods -> prods . block leftBranch '{' prods '}' rightBranch '{' prods soloIdentifier '}'    (rule 10)
	prods -> prods block leftBranch '{' prods . '}' rightBranch '{' prods soloIdentifier '}'    (rule 10)
	prods -> prods . block leftBranch '{' prods '}' rightBranch '{' prods '}'    (rule 11)
	prods -> prods block leftBranch '{' prods . '}' rightBranch '{' prods '}'    (rule 11)

	block          shift, and enter state 5
	soloIdentifier shift, and enter state 15
	'}'            shift, and enter state 16


State 11

	prods -> block leftBranch '{' prods soloIdentifier . '}' rightBranch '{' prods soloIdentifier '}'    (rule 3)
	prods -> block leftBranch '{' prods soloIdentifier . '}' rightBranch '{' prods '}'    (rule 4)

	'}'            shift, and enter state 14


State 12

	prods -> block leftBranch '{' prods '}' . rightBranch '{' prods soloIdentifier '}'    (rule 5)
	prods -> block leftBranch '{' prods '}' . rightBranch '{' prods '}'    (rule 6)

	rightBranch    shift, and enter state 13


State 13

	prods -> block leftBranch '{' prods '}' rightBranch . '{' prods soloIdentifier '}'    (rule 5)
	prods -> block leftBranch '{' prods '}' rightBranch . '{' prods '}'    (rule 6)

	'{'            shift, and enter state 20


State 14

	prods -> block leftBranch '{' prods soloIdentifier '}' . rightBranch '{' prods soloIdentifier '}'    (rule 3)
	prods -> block leftBranch '{' prods soloIdentifier '}' . rightBranch '{' prods '}'    (rule 4)

	rightBranch    shift, and enter state 19


State 15

	prods -> prods block leftBranch '{' prods soloIdentifier . '}' rightBranch '{' prods soloIdentifier '}'    (rule 8)
	prods -> prods block leftBranch '{' prods soloIdentifier . '}' rightBranch '{' prods '}'    (rule 9)

	'}'            shift, and enter state 18


State 16

	prods -> prods block leftBranch '{' prods '}' . rightBranch '{' prods soloIdentifier '}'    (rule 10)
	prods -> prods block leftBranch '{' prods '}' . rightBranch '{' prods '}'    (rule 11)

	rightBranch    shift, and enter state 17


State 17

	prods -> prods block leftBranch '{' prods '}' rightBranch . '{' prods soloIdentifier '}'    (rule 10)
	prods -> prods block leftBranch '{' prods '}' rightBranch . '{' prods '}'    (rule 11)

	'{'            shift, and enter state 24


State 18

	prods -> prods block leftBranch '{' prods soloIdentifier '}' . rightBranch '{' prods soloIdentifier '}'    (rule 8)
	prods -> prods block leftBranch '{' prods soloIdentifier '}' . rightBranch '{' prods '}'    (rule 9)

	rightBranch    shift, and enter state 23


State 19

	prods -> block leftBranch '{' prods soloIdentifier '}' rightBranch . '{' prods soloIdentifier '}'    (rule 3)
	prods -> block leftBranch '{' prods soloIdentifier '}' rightBranch . '{' prods '}'    (rule 4)

	'{'            shift, and enter state 22


State 20

	prods -> block leftBranch '{' prods '}' rightBranch '{' . prods soloIdentifier '}'    (rule 5)
	prods -> block leftBranch '{' prods '}' rightBranch '{' . prods '}'    (rule 6)

	block          shift, and enter state 3
			(reduce using rule 1)

	soloIdentifier reduce using rule 1
	'}'            reduce using rule 1

	prods          goto state 21

State 21

	prods -> block leftBranch '{' prods '}' rightBranch '{' prods . soloIdentifier '}'    (rule 5)
	prods -> block leftBranch '{' prods '}' rightBranch '{' prods . '}'    (rule 6)
	prods -> prods . block                              (rule 7)
	prods -> prods . block leftBranch '{' prods soloIdentifier '}' rightBranch '{' prods soloIdentifier '}'    (rule 8)
	prods -> prods . block leftBranch '{' prods soloIdentifier '}' rightBranch '{' prods '}'    (rule 9)
	prods -> prods . block leftBranch '{' prods '}' rightBranch '{' prods soloIdentifier '}'    (rule 10)
	prods -> prods . block leftBranch '{' prods '}' rightBranch '{' prods '}'    (rule 11)

	block          shift, and enter state 5
	soloIdentifier shift, and enter state 28
	'}'            shift, and enter state 29


State 22

	prods -> block leftBranch '{' prods soloIdentifier '}' rightBranch '{' . prods soloIdentifier '}'    (rule 3)
	prods -> block leftBranch '{' prods soloIdentifier '}' rightBranch '{' . prods '}'    (rule 4)

	block          shift, and enter state 3
			(reduce using rule 1)

	soloIdentifier reduce using rule 1
	'}'            reduce using rule 1

	prods          goto state 27

State 23

	prods -> prods block leftBranch '{' prods soloIdentifier '}' rightBranch . '{' prods soloIdentifier '}'    (rule 8)
	prods -> prods block leftBranch '{' prods soloIdentifier '}' rightBranch . '{' prods '}'    (rule 9)

	'{'            shift, and enter state 26


State 24

	prods -> prods block leftBranch '{' prods '}' rightBranch '{' . prods soloIdentifier '}'    (rule 10)
	prods -> prods block leftBranch '{' prods '}' rightBranch '{' . prods '}'    (rule 11)

	block          shift, and enter state 3
			(reduce using rule 1)

	soloIdentifier reduce using rule 1
	'}'            reduce using rule 1

	prods          goto state 25

State 25

	prods -> prods . block                              (rule 7)
	prods -> prods . block leftBranch '{' prods soloIdentifier '}' rightBranch '{' prods soloIdentifier '}'    (rule 8)
	prods -> prods . block leftBranch '{' prods soloIdentifier '}' rightBranch '{' prods '}'    (rule 9)
	prods -> prods . block leftBranch '{' prods '}' rightBranch '{' prods soloIdentifier '}'    (rule 10)
	prods -> prods block leftBranch '{' prods '}' rightBranch '{' prods . soloIdentifier '}'    (rule 10)
	prods -> prods . block leftBranch '{' prods '}' rightBranch '{' prods '}'    (rule 11)
	prods -> prods block leftBranch '{' prods '}' rightBranch '{' prods . '}'    (rule 11)

	block          shift, and enter state 5
	soloIdentifier shift, and enter state 34
	'}'            shift, and enter state 35


State 26

	prods -> prods block leftBranch '{' prods soloIdentifier '}' rightBranch '{' . prods soloIdentifier '}'    (rule 8)
	prods -> prods block leftBranch '{' prods soloIdentifier '}' rightBranch '{' . prods '}'    (rule 9)

	block          shift, and enter state 3
			(reduce using rule 1)

	soloIdentifier reduce using rule 1
	'}'            reduce using rule 1

	prods          goto state 33

State 27

	prods -> block leftBranch '{' prods soloIdentifier '}' rightBranch '{' prods . soloIdentifier '}'    (rule 3)
	prods -> block leftBranch '{' prods soloIdentifier '}' rightBranch '{' prods . '}'    (rule 4)
	prods -> prods . block                              (rule 7)
	prods -> prods . block leftBranch '{' prods soloIdentifier '}' rightBranch '{' prods soloIdentifier '}'    (rule 8)
	prods -> prods . block leftBranch '{' prods soloIdentifier '}' rightBranch '{' prods '}'    (rule 9)
	prods -> prods . block leftBranch '{' prods '}' rightBranch '{' prods soloIdentifier '}'    (rule 10)
	prods -> prods . block leftBranch '{' prods '}' rightBranch '{' prods '}'    (rule 11)

	block          shift, and enter state 5
	soloIdentifier shift, and enter state 31
	'}'            shift, and enter state 32


State 28

	prods -> block leftBranch '{' prods '}' rightBranch '{' prods soloIdentifier . '}'    (rule 5)

	'}'            shift, and enter state 30


State 29

	prods -> block leftBranch '{' prods '}' rightBranch '{' prods '}' .    (rule 6)

	block          reduce using rule 6
	soloIdentifier reduce using rule 6
	'}'            reduce using rule 6
	%eof           reduce using rule 6


State 30

	prods -> block leftBranch '{' prods '}' rightBranch '{' prods soloIdentifier '}' .    (rule 5)

	block          reduce using rule 5
	soloIdentifier reduce using rule 5
	'}'            reduce using rule 5
	%eof           reduce using rule 5


State 31

	prods -> block leftBranch '{' prods soloIdentifier '}' rightBranch '{' prods soloIdentifier . '}'    (rule 3)

	'}'            shift, and enter state 39


State 32

	prods -> block leftBranch '{' prods soloIdentifier '}' rightBranch '{' prods '}' .    (rule 4)

	block          reduce using rule 4
	soloIdentifier reduce using rule 4
	'}'            reduce using rule 4
	%eof           reduce using rule 4


State 33

	prods -> prods . block                              (rule 7)
	prods -> prods . block leftBranch '{' prods soloIdentifier '}' rightBranch '{' prods soloIdentifier '}'    (rule 8)
	prods -> prods block leftBranch '{' prods soloIdentifier '}' rightBranch '{' prods . soloIdentifier '}'    (rule 8)
	prods -> prods . block leftBranch '{' prods soloIdentifier '}' rightBranch '{' prods '}'    (rule 9)
	prods -> prods block leftBranch '{' prods soloIdentifier '}' rightBranch '{' prods . '}'    (rule 9)
	prods -> prods . block leftBranch '{' prods '}' rightBranch '{' prods soloIdentifier '}'    (rule 10)
	prods -> prods . block leftBranch '{' prods '}' rightBranch '{' prods '}'    (rule 11)

	block          shift, and enter state 5
	soloIdentifier shift, and enter state 37
	'}'            shift, and enter state 38


State 34

	prods -> prods block leftBranch '{' prods '}' rightBranch '{' prods soloIdentifier . '}'    (rule 10)

	'}'            shift, and enter state 36


State 35

	prods -> prods block leftBranch '{' prods '}' rightBranch '{' prods '}' .    (rule 11)

	block          reduce using rule 11
	soloIdentifier reduce using rule 11
	'}'            reduce using rule 11
	%eof           reduce using rule 11


State 36

	prods -> prods block leftBranch '{' prods '}' rightBranch '{' prods soloIdentifier '}' .    (rule 10)

	block          reduce using rule 10
	soloIdentifier reduce using rule 10
	'}'            reduce using rule 10
	%eof           reduce using rule 10


State 37

	prods -> prods block leftBranch '{' prods soloIdentifier '}' rightBranch '{' prods soloIdentifier . '}'    (rule 8)

	'}'            shift, and enter state 40


State 38

	prods -> prods block leftBranch '{' prods soloIdentifier '}' rightBranch '{' prods '}' .    (rule 9)

	block          reduce using rule 9
	soloIdentifier reduce using rule 9
	'}'            reduce using rule 9
	%eof           reduce using rule 9


State 39

	prods -> block leftBranch '{' prods soloIdentifier '}' rightBranch '{' prods soloIdentifier '}' .    (rule 3)

	block          reduce using rule 3
	soloIdentifier reduce using rule 3
	'}'            reduce using rule 3
	%eof           reduce using rule 3


State 40

	prods -> prods block leftBranch '{' prods soloIdentifier '}' rightBranch '{' prods soloIdentifier '}' .    (rule 8)

	block          reduce using rule 8
	soloIdentifier reduce using rule 8
	'}'            reduce using rule 8
	%eof           reduce using rule 8


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 12
Number of terminals: 6
Number of non-terminals: 2
Number of states: 41
