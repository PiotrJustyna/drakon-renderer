-----------------------------------------------------------------------------
Info file generated by Happy Version 2.1.5 from ./app/Drakon/Parser.y
-----------------------------------------------------------------------------

state 0 contains 2 shift/reduce conflicts.
state 7 contains 2 shift/reduce conflicts.
state 14 contains 2 shift/reduce conflicts.
state 15 contains 2 shift/reduce conflicts.
state 28 contains 2 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_diagram -> silhouette                       (0)
	silhouette -> soloIdentifier '{' prods '}'         (1)
	silhouette -> soloIdentifier '{' prods soloIdentifier '}'   (2)
	silhouette -> prods soloIdentifier '{' prods '}'   (3)
	silhouette -> prods soloIdentifier '{' prods soloIdentifier '}'   (4)
	prods ->                                           (5)
	prods -> block                                     (6)
	prods -> prods block                               (7)
	prods -> block leftBranch '{' prods soloIdentifier '}' rightBranch '{' prods soloIdentifier '}'   (8)
	prods -> silhouette                                (9)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	block          { TokenBlock $$ }
	soloIdentifier { TokenSoloIdentifier $$ }
	leftBranch     { TokenLeftBranch }
	rightBranch    { TokenRightBranch }
	'{'            { TokenOCB }
	'}'            { TokenCCB }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_diagram  rule  0
	silhouette      rules 1, 2, 3, 4
	prods           rules 5, 6, 7, 8, 9

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_diagram -> . silhouette                      (rule 0)

	block          shift, and enter state 5
			(reduce using rule 5)

	soloIdentifier shift, and enter state 6
			(reduce using rule 5)


	silhouette     goto state 3
	prods          goto state 4

State 1

	silhouette -> . soloIdentifier '{' prods '}'        (rule 1)

	soloIdentifier shift, and enter state 2


State 2

	silhouette -> soloIdentifier . '{' prods '}'        (rule 1)

	'{'            shift, and enter state 11


State 3

	%start_diagram -> silhouette .                      (rule 0)
	prods -> silhouette .                               (rule 9)

	block          reduce using rule 9
	soloIdentifier reduce using rule 9
	%eof           accept


State 4

	silhouette -> prods . soloIdentifier '{' prods '}'    (rule 3)
	silhouette -> prods . soloIdentifier '{' prods soloIdentifier '}'    (rule 4)
	prods -> prods . block                              (rule 7)

	block          shift, and enter state 9
	soloIdentifier shift, and enter state 10


State 5

	prods -> block .                                    (rule 6)
	prods -> block . leftBranch '{' prods soloIdentifier '}' rightBranch '{' prods soloIdentifier '}'    (rule 8)

	block          reduce using rule 6
	soloIdentifier reduce using rule 6
	leftBranch     shift, and enter state 8
	'}'            reduce using rule 6


State 6

	silhouette -> soloIdentifier . '{' prods '}'        (rule 1)
	silhouette -> soloIdentifier . '{' prods soloIdentifier '}'    (rule 2)

	'{'            shift, and enter state 7


State 7

	silhouette -> soloIdentifier '{' . prods '}'        (rule 1)
	silhouette -> soloIdentifier '{' . prods soloIdentifier '}'    (rule 2)

	block          shift, and enter state 5
			(reduce using rule 5)

	soloIdentifier shift, and enter state 6
			(reduce using rule 5)

	'}'            reduce using rule 5

	silhouette     goto state 12
	prods          goto state 16

State 8

	prods -> block leftBranch . '{' prods soloIdentifier '}' rightBranch '{' prods soloIdentifier '}'    (rule 8)

	'{'            shift, and enter state 15


State 9

	prods -> prods block .                              (rule 7)

	block          reduce using rule 7
	soloIdentifier reduce using rule 7
	'}'            reduce using rule 7


State 10

	silhouette -> prods soloIdentifier . '{' prods '}'    (rule 3)
	silhouette -> prods soloIdentifier . '{' prods soloIdentifier '}'    (rule 4)

	'{'            shift, and enter state 14


State 11

	silhouette -> soloIdentifier '{' . prods '}'        (rule 1)

	block          shift, and enter state 5
	soloIdentifier shift, and enter state 6

	silhouette     goto state 12
	prods          goto state 13

State 12

	prods -> silhouette .                               (rule 9)

	block          reduce using rule 9
	soloIdentifier reduce using rule 9
	'}'            reduce using rule 9


State 13

	silhouette -> soloIdentifier '{' prods . '}'        (rule 1)
	silhouette -> prods . soloIdentifier '{' prods '}'    (rule 3)
	silhouette -> prods . soloIdentifier '{' prods soloIdentifier '}'    (rule 4)
	prods -> prods . block                              (rule 7)

	block          shift, and enter state 9
	soloIdentifier shift, and enter state 10
	'}'            shift, and enter state 18


State 14

	silhouette -> prods soloIdentifier '{' . prods '}'    (rule 3)
	silhouette -> prods soloIdentifier '{' . prods soloIdentifier '}'    (rule 4)

	block          shift, and enter state 5
			(reduce using rule 5)

	soloIdentifier shift, and enter state 6
			(reduce using rule 5)

	'}'            reduce using rule 5

	silhouette     goto state 12
	prods          goto state 20

State 15

	prods -> block leftBranch '{' . prods soloIdentifier '}' rightBranch '{' prods soloIdentifier '}'    (rule 8)

	block          shift, and enter state 5
			(reduce using rule 5)

	soloIdentifier shift, and enter state 6
			(reduce using rule 5)


	silhouette     goto state 12
	prods          goto state 19

State 16

	silhouette -> soloIdentifier '{' prods . '}'        (rule 1)
	silhouette -> soloIdentifier '{' prods . soloIdentifier '}'    (rule 2)
	silhouette -> prods . soloIdentifier '{' prods '}'    (rule 3)
	silhouette -> prods . soloIdentifier '{' prods soloIdentifier '}'    (rule 4)
	prods -> prods . block                              (rule 7)

	block          shift, and enter state 9
	soloIdentifier shift, and enter state 17
	'}'            shift, and enter state 18


State 17

	silhouette -> soloIdentifier '{' prods soloIdentifier . '}'    (rule 2)
	silhouette -> prods soloIdentifier . '{' prods '}'    (rule 3)
	silhouette -> prods soloIdentifier . '{' prods soloIdentifier '}'    (rule 4)

	'{'            shift, and enter state 14
	'}'            shift, and enter state 24


State 18

	silhouette -> soloIdentifier '{' prods '}' .        (rule 1)

	block          reduce using rule 1
	soloIdentifier reduce using rule 1
	'}'            reduce using rule 1
	%eof           reduce using rule 1


State 19

	silhouette -> prods . soloIdentifier '{' prods '}'    (rule 3)
	silhouette -> prods . soloIdentifier '{' prods soloIdentifier '}'    (rule 4)
	prods -> prods . block                              (rule 7)
	prods -> block leftBranch '{' prods . soloIdentifier '}' rightBranch '{' prods soloIdentifier '}'    (rule 8)

	block          shift, and enter state 9
	soloIdentifier shift, and enter state 23


State 20

	silhouette -> prods . soloIdentifier '{' prods '}'    (rule 3)
	silhouette -> prods soloIdentifier '{' prods . '}'    (rule 3)
	silhouette -> prods . soloIdentifier '{' prods soloIdentifier '}'    (rule 4)
	silhouette -> prods soloIdentifier '{' prods . soloIdentifier '}'    (rule 4)
	prods -> prods . block                              (rule 7)

	block          shift, and enter state 9
	soloIdentifier shift, and enter state 21
	'}'            shift, and enter state 22


State 21

	silhouette -> prods soloIdentifier . '{' prods '}'    (rule 3)
	silhouette -> prods soloIdentifier . '{' prods soloIdentifier '}'    (rule 4)
	silhouette -> prods soloIdentifier '{' prods soloIdentifier . '}'    (rule 4)

	'{'            shift, and enter state 14
	'}'            shift, and enter state 26


State 22

	silhouette -> prods soloIdentifier '{' prods '}' .    (rule 3)

	block          reduce using rule 3
	soloIdentifier reduce using rule 3
	'}'            reduce using rule 3
	%eof           reduce using rule 3


State 23

	silhouette -> prods soloIdentifier . '{' prods '}'    (rule 3)
	silhouette -> prods soloIdentifier . '{' prods soloIdentifier '}'    (rule 4)
	prods -> block leftBranch '{' prods soloIdentifier . '}' rightBranch '{' prods soloIdentifier '}'    (rule 8)

	'{'            shift, and enter state 14
	'}'            shift, and enter state 25


State 24

	silhouette -> soloIdentifier '{' prods soloIdentifier '}' .    (rule 2)

	block          reduce using rule 2
	soloIdentifier reduce using rule 2
	'}'            reduce using rule 2
	%eof           reduce using rule 2


State 25

	prods -> block leftBranch '{' prods soloIdentifier '}' . rightBranch '{' prods soloIdentifier '}'    (rule 8)

	rightBranch    shift, and enter state 27


State 26

	silhouette -> prods soloIdentifier '{' prods soloIdentifier '}' .    (rule 4)

	block          reduce using rule 4
	soloIdentifier reduce using rule 4
	'}'            reduce using rule 4
	%eof           reduce using rule 4


State 27

	prods -> block leftBranch '{' prods soloIdentifier '}' rightBranch . '{' prods soloIdentifier '}'    (rule 8)

	'{'            shift, and enter state 28


State 28

	prods -> block leftBranch '{' prods soloIdentifier '}' rightBranch '{' . prods soloIdentifier '}'    (rule 8)

	block          shift, and enter state 5
			(reduce using rule 5)

	soloIdentifier shift, and enter state 6
			(reduce using rule 5)


	silhouette     goto state 12
	prods          goto state 29

State 29

	silhouette -> prods . soloIdentifier '{' prods '}'    (rule 3)
	silhouette -> prods . soloIdentifier '{' prods soloIdentifier '}'    (rule 4)
	prods -> prods . block                              (rule 7)
	prods -> block leftBranch '{' prods soloIdentifier '}' rightBranch '{' prods . soloIdentifier '}'    (rule 8)

	block          shift, and enter state 9
	soloIdentifier shift, and enter state 30


State 30

	silhouette -> prods soloIdentifier . '{' prods '}'    (rule 3)
	silhouette -> prods soloIdentifier . '{' prods soloIdentifier '}'    (rule 4)
	prods -> block leftBranch '{' prods soloIdentifier '}' rightBranch '{' prods soloIdentifier . '}'    (rule 8)

	'{'            shift, and enter state 14
	'}'            shift, and enter state 31


State 31

	prods -> block leftBranch '{' prods soloIdentifier '}' rightBranch '{' prods soloIdentifier '}' .    (rule 8)

	block          reduce using rule 8
	soloIdentifier reduce using rule 8
	'}'            reduce using rule 8


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 10
Number of terminals: 6
Number of non-terminals: 3
Number of states: 32
