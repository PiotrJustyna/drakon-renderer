-----------------------------------------------------------------------------
Info file generated by Happy Version 2.1.5 from ./app/Drakon/Parser.y
-----------------------------------------------------------------------------

state 0 contains 2 shift/reduce conflicts.
state 5 contains 2 shift/reduce conflicts.
state 8 contains 2 shift/reduce conflicts.

terminal leftBranch is unused
terminal rightBranch is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_diagram -> prods                            (0)
	prods ->                                           (1)
	prods -> block                                     (2)
	prods -> soloIdentifier '{' prods '}'              (3)
	prods -> prods block                               (4)
	prods -> prods soloIdentifier '{' prods '}'        (5)
	prods -> prods soloIdentifier '{' prods '#' '}'    (6)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	block          { TokenBlock $$ }
	soloIdentifier { TokenSoloIdentifier $$ }
	leftBranch     { TokenLeftBranch }
	rightBranch    { TokenRightBranch }
	'{'            { TokenOCB }
	'}'            { TokenCCB }
	'#'            { TokenH }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_diagram  rule  0
	prods           rules 1, 2, 3, 4, 5, 6

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_diagram -> . prods                           (rule 0)

	block          shift, and enter state 3
			(reduce using rule 1)

	soloIdentifier shift, and enter state 4
			(reduce using rule 1)

	%eof           reduce using rule 1

	prods          goto state 2

State 1

	prods -> .                                          (rule 1)



State 2

	%start_diagram -> prods .                           (rule 0)
	prods -> prods . block                              (rule 4)
	prods -> prods . soloIdentifier '{' prods '}'       (rule 5)
	prods -> prods . soloIdentifier '{' prods '#' '}'    (rule 6)

	block          shift, and enter state 6
	soloIdentifier shift, and enter state 7
	%eof           accept


State 3

	prods -> block .                                    (rule 2)

	block          reduce using rule 2
	soloIdentifier reduce using rule 2
	'}'            reduce using rule 2
	'#'            reduce using rule 2
	%eof           reduce using rule 2


State 4

	prods -> soloIdentifier . '{' prods '}'             (rule 3)

	'{'            shift, and enter state 5


State 5

	prods -> soloIdentifier '{' . prods '}'             (rule 3)

	block          shift, and enter state 3
			(reduce using rule 1)

	soloIdentifier shift, and enter state 4
			(reduce using rule 1)

	'}'            reduce using rule 1

	prods          goto state 9

State 6

	prods -> prods block .                              (rule 4)

	block          reduce using rule 4
	soloIdentifier reduce using rule 4
	'}'            reduce using rule 4
	'#'            reduce using rule 4
	%eof           reduce using rule 4


State 7

	prods -> prods soloIdentifier . '{' prods '}'       (rule 5)
	prods -> prods soloIdentifier . '{' prods '#' '}'    (rule 6)

	'{'            shift, and enter state 8


State 8

	prods -> prods soloIdentifier '{' . prods '}'       (rule 5)
	prods -> prods soloIdentifier '{' . prods '#' '}'    (rule 6)

	block          shift, and enter state 3
			(reduce using rule 1)

	soloIdentifier shift, and enter state 4
			(reduce using rule 1)

	'}'            reduce using rule 1
	'#'            reduce using rule 1

	prods          goto state 11

State 9

	prods -> soloIdentifier '{' prods . '}'             (rule 3)
	prods -> prods . block                              (rule 4)
	prods -> prods . soloIdentifier '{' prods '}'       (rule 5)
	prods -> prods . soloIdentifier '{' prods '#' '}'    (rule 6)

	block          shift, and enter state 6
	soloIdentifier shift, and enter state 7
	'}'            shift, and enter state 10


State 10

	prods -> soloIdentifier '{' prods '}' .             (rule 3)

	block          reduce using rule 3
	soloIdentifier reduce using rule 3
	'}'            reduce using rule 3
	'#'            reduce using rule 3
	%eof           reduce using rule 3


State 11

	prods -> prods . block                              (rule 4)
	prods -> prods . soloIdentifier '{' prods '}'       (rule 5)
	prods -> prods soloIdentifier '{' prods . '}'       (rule 5)
	prods -> prods . soloIdentifier '{' prods '#' '}'    (rule 6)
	prods -> prods soloIdentifier '{' prods . '#' '}'    (rule 6)

	block          shift, and enter state 6
	soloIdentifier shift, and enter state 7
	'}'            shift, and enter state 12
	'#'            shift, and enter state 13


State 12

	prods -> prods soloIdentifier '{' prods '}' .       (rule 5)

	block          reduce using rule 5
	soloIdentifier reduce using rule 5
	'}'            reduce using rule 5
	'#'            reduce using rule 5
	%eof           reduce using rule 5


State 13

	prods -> prods soloIdentifier '{' prods '#' . '}'    (rule 6)

	'}'            shift, and enter state 14


State 14

	prods -> prods soloIdentifier '{' prods '#' '}' .    (rule 6)

	block          reduce using rule 6
	soloIdentifier reduce using rule 6
	'}'            reduce using rule 6
	'#'            reduce using rule 6
	%eof           reduce using rule 6


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 7
Number of terminals: 7
Number of non-terminals: 2
Number of states: 15
