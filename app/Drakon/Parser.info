-----------------------------------------------------------------------------
Info file generated by Happy Version 2.1.5 from ./app/Drakon/Parser.y
-----------------------------------------------------------------------------

state 0 contains 1 shift/reduce conflicts.
state 7 contains 1 shift/reduce conflicts.
state 9 contains 1 shift/reduce conflicts.
state 15 contains 1 shift/reduce conflicts.
state 17 contains 1 shift/reduce conflicts.

terminal soloIdentifier is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_diagram -> prods                            (0)
	prods ->                                           (1)
	prods -> block                                     (2)
	prods -> block leftBranch '{' prods '}' rightBranch '{' prods '}'   (3)
	prods -> prods block                               (4)
	prods -> prods block leftBranch '{' prods '}' rightBranch '{' prods '}'   (5)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	block          { TokenBlock $$ }
	soloIdentifier { TokenSoloIdentifier $$ }
	leftBranch     { TokenLeftBranch }
	rightBranch    { TokenRightBranch }
	'{'            { TokenOCB }
	'}'            { TokenCCB }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_diagram  rule  0
	prods           rules 1, 2, 3, 4, 5

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_diagram -> . prods                           (rule 0)

	block          shift, and enter state 3
			(reduce using rule 1)

	%eof           reduce using rule 1

	prods          goto state 2

State 1

	prods -> .                                          (rule 1)



State 2

	%start_diagram -> prods .                           (rule 0)
	prods -> prods . block                              (rule 4)
	prods -> prods . block leftBranch '{' prods '}' rightBranch '{' prods '}'    (rule 5)

	block          shift, and enter state 5
	%eof           accept


State 3

	prods -> block .                                    (rule 2)
	prods -> block . leftBranch '{' prods '}' rightBranch '{' prods '}'    (rule 3)

	block          reduce using rule 2
	leftBranch     shift, and enter state 4
	'}'            reduce using rule 2
	%eof           reduce using rule 2


State 4

	prods -> block leftBranch . '{' prods '}' rightBranch '{' prods '}'    (rule 3)

	'{'            shift, and enter state 7


State 5

	prods -> prods block .                              (rule 4)
	prods -> prods block . leftBranch '{' prods '}' rightBranch '{' prods '}'    (rule 5)

	block          reduce using rule 4
	leftBranch     shift, and enter state 6
	'}'            reduce using rule 4
	%eof           reduce using rule 4


State 6

	prods -> prods block leftBranch . '{' prods '}' rightBranch '{' prods '}'    (rule 5)

	'{'            shift, and enter state 9


State 7

	prods -> block leftBranch '{' . prods '}' rightBranch '{' prods '}'    (rule 3)

	block          shift, and enter state 3
			(reduce using rule 1)

	'}'            reduce using rule 1

	prods          goto state 8

State 8

	prods -> block leftBranch '{' prods . '}' rightBranch '{' prods '}'    (rule 3)
	prods -> prods . block                              (rule 4)
	prods -> prods . block leftBranch '{' prods '}' rightBranch '{' prods '}'    (rule 5)

	block          shift, and enter state 5
	'}'            shift, and enter state 11


State 9

	prods -> prods block leftBranch '{' . prods '}' rightBranch '{' prods '}'    (rule 5)

	block          shift, and enter state 3
			(reduce using rule 1)

	'}'            reduce using rule 1

	prods          goto state 10

State 10

	prods -> prods . block                              (rule 4)
	prods -> prods . block leftBranch '{' prods '}' rightBranch '{' prods '}'    (rule 5)
	prods -> prods block leftBranch '{' prods . '}' rightBranch '{' prods '}'    (rule 5)

	block          shift, and enter state 5
	'}'            shift, and enter state 13


State 11

	prods -> block leftBranch '{' prods '}' . rightBranch '{' prods '}'    (rule 3)

	rightBranch    shift, and enter state 12


State 12

	prods -> block leftBranch '{' prods '}' rightBranch . '{' prods '}'    (rule 3)

	'{'            shift, and enter state 15


State 13

	prods -> prods block leftBranch '{' prods '}' . rightBranch '{' prods '}'    (rule 5)

	rightBranch    shift, and enter state 14


State 14

	prods -> prods block leftBranch '{' prods '}' rightBranch . '{' prods '}'    (rule 5)

	'{'            shift, and enter state 17


State 15

	prods -> block leftBranch '{' prods '}' rightBranch '{' . prods '}'    (rule 3)

	block          shift, and enter state 3
			(reduce using rule 1)

	'}'            reduce using rule 1

	prods          goto state 16

State 16

	prods -> block leftBranch '{' prods '}' rightBranch '{' prods . '}'    (rule 3)
	prods -> prods . block                              (rule 4)
	prods -> prods . block leftBranch '{' prods '}' rightBranch '{' prods '}'    (rule 5)

	block          shift, and enter state 5
	'}'            shift, and enter state 19


State 17

	prods -> prods block leftBranch '{' prods '}' rightBranch '{' . prods '}'    (rule 5)

	block          shift, and enter state 3
			(reduce using rule 1)

	'}'            reduce using rule 1

	prods          goto state 18

State 18

	prods -> prods . block                              (rule 4)
	prods -> prods . block leftBranch '{' prods '}' rightBranch '{' prods '}'    (rule 5)
	prods -> prods block leftBranch '{' prods '}' rightBranch '{' prods . '}'    (rule 5)

	block          shift, and enter state 5
	'}'            shift, and enter state 20


State 19

	prods -> block leftBranch '{' prods '}' rightBranch '{' prods '}' .    (rule 3)

	block          reduce using rule 3
	'}'            reduce using rule 3
	%eof           reduce using rule 3


State 20

	prods -> prods block leftBranch '{' prods '}' rightBranch '{' prods '}' .    (rule 5)

	block          reduce using rule 5
	'}'            reduce using rule 5
	%eof           reduce using rule 5


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 6
Number of terminals: 6
Number of non-terminals: 2
Number of states: 21
